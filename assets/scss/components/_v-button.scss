@use "sass:map";
@use "sass:math";

$v-button-size-vars-by-variant: () !default;

// root
$v-button: (
    s: (
        font-size: rem(12),
        min-width: rem(32),
        height: rem(32),
    ),
    m: (
        font-size: rem(14),
        min-width: rem(38),
        height: rem(38),
    ),
    l: (
        font-size: rem(18),
        min-width: rem(42),
        height: rem(42),
    ),
    xl: (
        font-size: rem(24),
        min-width: rem(48),
        height: rem(48),
    )
);
$v-button-rounded: (
    s: (
        border-radius: math.div(rem(32), 2)
    ),
    m: (
        border-radius: math.div(rem(38), 2)
    ),
    l: (
        border-radius: math.div(rem(42), 2)
    ),
    xl: (
        border-radius: math.div(rem(48), 2)
    ),
);
$v-button-filled: (
    s: (
        padding: 0 rem(8)
    ),
    m: (
        padding: 0 rem(10)
    ),
    l: (
        padding: 0 rem(16)
    ),
    xl: (
        padding: 0 rem(16)
    ),
);

// icon
$v-button-icon: ();

// label
$v-button-label: (
    s: (
        margin-inline: rem(6) rem(2),
    ),
    m: (
        margin-inline: rem(6) rem(2),
    ),
    l: (
        margin-inline: rem(4) rem(2),
    ),
    xl: (
        margin-inline: rem(4) rem(2),
    ),
);

$v-button-size-vars-by-variant: map-merge($v-button-size-vars-by-variant, (
    default: (
        (vars: $v-button, prefix: ''),
        (vars: $v-button-rounded, prefix: 'rounded'),
        (vars: $v-button-filled, prefix: 'filled'),
        (vars: $v-button-icon, prefix: 'icon'),
        (vars: $v-button-label, prefix: 'label'),
    )
));


/**
 * Get css vars for a specific size
 */
@mixin v-button-size($size, $variant: default) {
    @if  map-has-key($v-button-size-vars-by-variant, $variant) {
        $vars: map-get($v-button-size-vars-by-variant, $variant);

        @each $value in $vars {
            @if  map-has-key($value, vars) and map-has-key($value, prefix) {
                @include v-button-css-vars-by-size(map-get($value, vars), $size, map-get($value, prefix));
            }
        }
    }
}

@mixin v-button-default-css-vars($vars, $prefix: '', $default: 'm') {
    @include default-css-vars('v-button', $vars, $prefix, $default);
}

@mixin v-button-css-vars-by-size($vars, $size, $prefix: '') {
    @include css-vars-by-size('v-button', $vars, $size, $prefix);
}


/**
 * Set the size of the button according to the breakpoints.
 */

@mixin v-button-responsive-sizes($sizes: (xs: s, lg: m), $variant: default) {
    @if  type-of($sizes) != 'map' or length($sizes) < 2 {
        @error "Set multiple breakpoints values";
    }

    $first-value: list.nth(map.values($sizes), 1);

    @include v-button-size($first-value, $variant);

    $first-breakpoint: list.nth(map.keys($sizes), 1);
    $sizes: map-remove($sizes, $first-breakpoint);

    @each $breakpoint, $size in $sizes {
        @include media('>=#{$breakpoint}') {
            @include v-button-size($size, $variant);
        }
    }
}
